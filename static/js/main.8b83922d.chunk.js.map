{"version":3,"sources":["components/Timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","time","setTime","autostart","setAutostart","step","timerLine","useRef","width","useEffect","ticker","setInterval","onTimeStart","onTick","onTimeEnd","clearInterval","className","onClick","onTimePause","Math","floor","toString","padStart","style","current","App","console","log","timeLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAEaA,EAAQ,SAACC,GAAW,IAAD,EAENC,mBAASD,EAAME,MAFT,mBAEvBA,EAFuB,KAEjBC,EAFiB,OAGEF,mBAASD,EAAMI,WAHjB,mBAGzBA,EAHyB,KAGdC,EAHc,OAIfJ,mBAASD,EAAMM,MAAvBA,EAJuB,oBAM1BC,EAAYC,iBAAO,CAAEC,MAAO,SAmChC,OA1BAC,qBAAU,WACR,IAAMC,EAASC,aAAY,WACrBV,EAAO,GAAKE,IAEVF,IAASF,EAAME,MACjBF,EAAMa,cAGRV,GAAQ,SAAAD,GAAI,OAAIA,EAAOI,KAEvBN,EAAMc,QAAQZ,EAAOI,GAAQ,KAEzBJ,EAAOI,IAAS,GAClBN,EAAMe,eAITT,GAEH,OAAO,WACLU,cAAcL,MAEf,CAACT,EAAME,EAAWE,EAAMN,IAKzB,sBAAKiB,UAAU,QAAf,UACE,wBAAQA,UAAU,eAAeC,QAnCjB,WACdhB,IAASF,EAAME,MAAQE,GACzBJ,EAAMmB,cAERd,GAAa,SAAAD,GAAS,OAAKA,MA+BzB,SAAyDA,EAAsB,QAAV,UACrE,qBAAKa,UAAU,cAAf,mBACMG,KAAKC,MAAMnB,EAAO,IAAO,IAAIoB,WAAWC,SAAS,EAAG,KAD1D,aACmErB,EAAO,IAAO,IAAIoB,WAAWC,SAAS,EAAG,QAE5G,qBAAKN,UAAU,aAAaO,MAAOjB,EAAUkB,QAAU,CAAEhB,MAAc,IAAPP,EAAaF,EAAME,KAAO,W,MCxBjFwB,MAtBf,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,cAAC,EAAD,CAAOf,KAAM,IACXE,WAAW,EACXE,KAAM,IACNQ,OAAQ,SAACZ,GAAD,OAAUyB,QAAQC,IAAI,0FAAsB1B,IACpDW,YAAa,SAACgB,GAAD,OAAcF,QAAQC,IAAI,2FACvCT,YAAa,SAACU,GAAD,OAAcF,QAAQC,IAAI,sFACvCb,UAAW,kBAAMY,QAAQC,IAAI,+DAE/B,cAAC,EAAD,CAAO1B,KAAM,IACXE,WAAW,EACXE,KAAM,IACNQ,OAAQ,SAACZ,GAAD,OAAUyB,QAAQC,IAAI,0FAAsB1B,IACpDW,YAAa,SAACgB,GAAD,OAAcF,QAAQC,IAAI,2FACvCT,YAAa,SAACU,GAAD,OAAcF,QAAQC,IAAI,sFACvCb,UAAW,kBAAMY,QAAQC,IAAI,mECRtBE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.8b83922d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nexport const Timer = (props) => {\r\n\r\n  const [time, setTime] = useState(props.time);\r\n  let [autostart, setAutostart] = useState(props.autostart);\r\n  const [step] = useState(props.step);\r\n\r\n  let timerLine = useRef({ width: '100%' });\r\n\r\n  const togglePause = () => {\r\n    if (time !== props.time && autostart) {\r\n      props.onTimePause();\r\n    }\r\n    setAutostart(autostart => !autostart);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const ticker = setInterval(() => {\r\n      if (time > 0 && autostart) {\r\n\r\n        if (time === props.time) {\r\n          props.onTimeStart();\r\n        }\r\n\r\n        setTime(time => time - step);\r\n\r\n        props.onTick((time - step) / 1000);\r\n\r\n        if (time - step === 0) {\r\n          props.onTimeEnd();\r\n        }\r\n\r\n      }\r\n    }, step);\r\n\r\n    return () => {\r\n      clearInterval(ticker)\r\n    }\r\n  }, [time, autostart, step, props])\r\n\r\n\r\n\r\n  return (\r\n    <div className='timer'>\r\n      <button className='timer-button' onClick={togglePause}>{!autostart ? 'start' : 'pause'}</button>\r\n      <div className='timer-table'>\r\n        {`${Math.floor(time / 1000 / 60).toString().padStart(2, '0')}:${(time / 1000 % 60).toString().padStart(2, '0')}`}\r\n      </div>\r\n      <div className=\"timer-line\" style={timerLine.current = { width: time * 100 / props.time + \"%\" }}></div>\r\n    </div>\r\n  )\r\n\r\n}","import {Timer} from \"./components/Timer\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer time={5000} \n        autostart={false} \n        step={1000} \n        onTick={(time) => console.log(\"Залишилось часу: \" + time)}\n        onTimeStart={(timeLeft) => console.log(\"Таймер запущено!\")}\n        onTimePause={(timeLeft) => console.log(\"Таймер на паузі!\")}\n        onTimeEnd={() => console.log(\"Час вийшов!\")} />\n\n      <Timer time={6000000} \n        autostart={true} \n        step={2000} \n        onTick={(time) => console.log(\"Залишилось часу: \" + time)}\n        onTimeStart={(timeLeft) => console.log(\"Таймер запущено!\")}\n        onTimePause={(timeLeft) => console.log(\"Таймер на паузі!\")}\n        onTimeEnd={() => console.log(\"Час вийшов!\")} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}